//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/_Code/Player_code/Player_Joystick.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_Joystick : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_Joystick()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Joystick"",
    ""maps"": [
        {
            ""name"": ""Joystick_Main"",
            ""id"": ""ac9bb13e-b3db-4b58-b215-1b171e40e628"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1c17b5a3-3f66-4891-b154-8827b30648a9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""11c47bb0-7b3f-4be7-8138-776dbc2efa1d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""bd249ebb-f41e-4375-8deb-b6c6d5adfcb3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3ef48db6-b7bd-4ffa-87f0-5b3ce424cc13"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""45d9a2de-090d-4438-a12a-8049711e3f24"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2f2d2cf1-b499-4f02-a331-291aa1324f51"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7a676f4b-8664-41aa-9852-49fc70853a9c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Joystick_Main
        m_Joystick_Main = asset.FindActionMap("Joystick_Main", throwIfNotFound: true);
        m_Joystick_Main_Move = m_Joystick_Main.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Joystick_Main
    private readonly InputActionMap m_Joystick_Main;
    private IJoystick_MainActions m_Joystick_MainActionsCallbackInterface;
    private readonly InputAction m_Joystick_Main_Move;
    public struct Joystick_MainActions
    {
        private @Player_Joystick m_Wrapper;
        public Joystick_MainActions(@Player_Joystick wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Joystick_Main_Move;
        public InputActionMap Get() { return m_Wrapper.m_Joystick_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Joystick_MainActions set) { return set.Get(); }
        public void SetCallbacks(IJoystick_MainActions instance)
        {
            if (m_Wrapper.m_Joystick_MainActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Joystick_MainActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Joystick_MainActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Joystick_MainActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_Joystick_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public Joystick_MainActions @Joystick_Main => new Joystick_MainActions(this);
    public interface IJoystick_MainActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
